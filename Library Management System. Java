import java.sql.*;

// Book class to represent each book
class Book {
    private int id;
    private String title;
    private String author;
    private String genre;
    private boolean available;

    public Book(int id, String title, String author, String genre, boolean available) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.genre = genre;
        this.available = available;
    }

    // Getters and Setters
    public int getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getGenre() {
        return genre;
    }

    public boolean isAvailable() {
        return available;
    }

    public void setAvailable(boolean available) {
        this.available = available;
    }
}

// Patron class to represent each patron
class Patron {
    private int id;
    private String name;
    private String contactInfo;

    public Patron(int id, String name, String contactInfo) {
        this.id = id;
        this.name = name;
        this.contactInfo = contactInfo;
    }

    // Getters and Setters
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getContactInfo() {
        return contactInfo;
    }
}

// Library Management System class
public class LibraryManagementSystem {
    private Connection conn;

    public LibraryManagementSystem() {
        try {
            conn = DriverManager.getConnection("jdbc:sqlite:library.db");
            createTables(); // Create necessary tables if not exists
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method to create necessary tables in the database
    private void createTables() {
        String createBooksTable = "CREATE TABLE IF NOT EXISTS books (" +
                "id INTEGER PRIMARY KEY," +
                "title TEXT," +
                "author TEXT," +
                "genre TEXT," +
                "available BOOLEAN)";
        String createPatronsTable = "CREATE TABLE IF NOT EXISTS patrons (" +
                "id INTEGER PRIMARY KEY," +
                "name TEXT," +
                "contact_info TEXT)";
        try {
            Statement stmt = conn.createStatement();
            stmt.execute(createBooksTable);
            stmt.execute(createPatronsTable);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method to add a new book to the library
    public void addBook(Book book) {
        String sql = "INSERT INTO books (title, author, genre, available) VALUES (?, ?, ?, ?)";
        try {
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, book.getTitle());
            pstmt.setString(2, book.getAuthor());
            pstmt.setString(3, book.getGenre());
            pstmt.setBoolean(4, book.isAvailable());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method to add a new patron to the library
    public void addPatron(Patron patron) {
        String sql = "INSERT INTO patrons (name, contact_info) VALUES (?, ?)";
        try {
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, patron.getName());
            pstmt.setString(2, patron.getContactInfo());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method to retrieve all books from the library
    public void getAllBooks() {
        String sql = "SELECT * FROM books";
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") +
                        ", Title: " + rs.getString("title") +
                        ", Author: " + rs.getString("author") +
                        ", Genre: " + rs.getString("genre") +
                        ", Available: " + rs.getBoolean("available"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method to retrieve all patrons from the library
    public void getAllPatrons() {
        String sql = "SELECT * FROM patrons";
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") +
                        ", Name: " + rs.getString("name") +
                        ", Contact Info: " + rs.getString("contact_info"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Main method for testing
    public static void main(String[] args) {
        LibraryManagementSystem library = new LibraryManagementSystem();
        
        // Adding sample books and patrons
        library.addBook(new Book(1, "The Great Gatsby", "F. Scott Fitzgerald", "Classic", true));
        library.addBook(new Book(2, "To Kill a Mockingbird", "Harper Lee", "Classic", true));
        library.addBook(new Book(3, "1984", "George Orwell", "Dystopian", true));

        library.addPatron(new Patron(1, "Alice", "alice@example.com"));
        library.addPatron(new Patron(2, "Bob", "bob@example.com"));

        // Retrieving and displaying all books and patrons
        System.out.println("All Books:");
        library.getAllBooks();

        System.out.println("\nAll Patrons:");
        library.getAllPatrons();
    }
}
